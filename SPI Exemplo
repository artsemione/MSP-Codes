#include <msp430.h> 

int main(void) {

    volatile unsigned int i;

      WDTCTL = WDTPW+WDTHOLD;                   // Stop watchdog timer

      P1OUT |= 0x02;                            // Set P1.0 for LED
                                                // Set P1.1 for slave reset

      P1DIR |= 0x03;                            // Set P1.0-2 to output direction
      P3SEL |= BIT3+BIT4;                       // P3.3,4 option select
      P2SEL |= BIT7;                            // P2.7 option select

      UCA0CTL1 |= UCSWRST;                      // 1b = Enabled. USCI logic held in reset state.
      	  	  	  	  	  	  	  	  	  	  	/* Put state machine in reset (USCI works as a State Machine...
      	  	  	  	  	  	  	  	  	  	  	 we have to deactivate this until we finish setting the SPI mode) */

      UCA0CTL0 |= UCMST+UCSYNC+UCCKPL+UCMSB;

      // 3-pin, 8-bit SPI master

      // UCMSB   0b = LSB first                   1b = MSB first
      // UCCKPL  0b = The inactive state is low.  1b = The inactive state is high.
      // UCSYNC  0b = Asynchronous mode           1b = Synchronous mode
      // UCMST   0b = Slave mode                  1b = Master mode


      UCA0CTL1 |= UCSSEL_2;                     // 00b = Reserved / 01b = ACLK / 10b = SMCLK / 11b = SMCLK
      UCA0BR0 = 0x02;                           // /2
      UCA0BR1 = 0;                              //
      UCA0MCTL = 0;                             // No modulation

      UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
      UCA0IE |= UCRXIE;                         // Enable USCI_A0 RX interrupt

      P1OUT &= ~0x02;                           // Now with SPI signals initialized,
      P1OUT |= 0x02;                            // reset slave

      for(i=50;i>0;i--);                        // Wait for slave to initialize

      MST_Data = 0x01;                          // Initialize data values
      SLV_Data = 0x00;                          //

      while (!(UCA0IFG & UCTXIFG));               // USCI_A0 TX buffer ready?
      	  	  	  	  	  	  	  	  	  	  	  // UCTXIFG Transmit Interrupt Flag
      UCA0TXBUF = MST_Data;                       // Transmit first character

      __bis_SR_register(LPM0_bits + GIE);       // CPU off, enable interrupts
	return 0;
}



#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
  volatile unsigned int i;

  switch(__even_in_range(UCA0IV,4))
  {
    case 0: break;                          // Vector 0 - no interrupt
    case 2:                                 // Vector 2 - RXIFG
      while (!(UCA0IFG & UCTXIFG));           // USCI_A0 TX buffer ready?

      if (UCA0RXBUF == SLV_Data)              // Test for correct character RX'd
        P1OUT |= 0x01;                      // If correct, light LED
      else
        P1OUT &= ~0x01;                     // If incorrect, clear LED

      MST_Data++;                           // Increment data
      SLV_Data++;
      UCA0TXBUF = MST_Data;                 // Send next value

      for(i = 20; i>0; i--);                // Add time between transmissions to
                                            // make sure slave can process information
      break;
    case 4: break;                          // Vector 4 - TXIFG
    default: break;
  }
}

